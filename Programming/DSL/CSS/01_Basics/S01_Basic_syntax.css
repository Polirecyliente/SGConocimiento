/*
#   Basic syntax
*/

/* #T# Table of contents */

/* #C# Syntax to apply style to HTML tags */
/* #C# General values */
/* #C# Color properties */
/* #C# Font properties */

/* #T# Beginning of content */

/* # |------------------------------------------------------------- */
/* #T# apply a CSS file to an HTML file, using the <link> tag inside the HTML file, with the rel attribute having the value "stylesheet", and the href attribute linking to the CSS file */
/* # SYNTAX <link rel="stylesheet" href="/path/to/file1.css"> */
/* # |------------------------------------------------------------- */

/* #C# Syntax to apply style to HTML tags */

/* # |------------------------------------------------------------- */
/* #T# style is applied to HTML tags by via the properties of the HTML tags, each property can have several values, setting these values sets the style of the HTML tag */

/* # SYNTAX application of style to the HTML tag <tag1> that has the properties, property1 and property2, each with values, value1 and value2 */
/* # tag1                   */
/* # {                      */
/* #     property1: value1; */
/* #     property2: value2; */
/* # }                      */
/* #T# tags are called selectors in this context, so tag1 is the selector, properties and values act as key value pairs of each selector (of each tag) */

p
{
    color:red;
}
a
{
    color:green;
}
/* #T# the <p> tag and the <a> tag are being colored with the color property */
/* # |------------------------------------------------------------- */

/* #C# General values */

/* # |------------------------------------------------------------- */
/* #T# there are a few values that are general, and so can be applied to most properties */

/* #T# the inherit value means that the property inherits the value from the parent tag */
p {color: inherit;}

/* #T# the initial value means that the property gets its value from the browser default */
p {color: initial;}

/* #T# the unset value means that if the parent tag has a value, then the value is 'inherit', but else if the parent has no value, then the value is 'initial' */
p {color: unset;}
/* # |------------------------------------------------------------- */

/* #C# Color properties */

/* # |------------------------------------------------------------- */
/* #T# the color property is a string that sets the color of the text contents of its tag */
/* #T#     the predefined values of the color property are: aliceblue, antiquewhite, aqua, aquamarine, azure, beige, bisque, black, blanchedalmond, blue, blueviolet, brown, burlywood, cadetblue, chartreuse, chocolate, coral, cornflowerblue, cornsilk, crimson, cyan, darkcyan, darkgoldenrod, darkgray, darkgreen, darkgrey, darkkhaki, darkmagenta, darkolivegreen, darkorange, darkorchid, darkred, darksalmon, darkseagreen, darkslateblue, darkslategray, darkslategrey, darkturquoise, darkviolet, deeppink, deepskyblue, dimgray, dimgrey, dodgerblue, firebrick, floralwhite, forestgreen, fuchsia, gainsboro, ghostwhite, gold, goldenrod, gray, green, greenyellow, grey, honeydew, hotpink, indianred, indigo, ivory, khaki, lavender, lavenderblush, lawngreen, lemonchiffon, lightblue, lightcoral, lightcyan, lightgoldenrodyellow, lightgray, lightgreen, lightgrey, lightpink, lightsalmon, lightseagreen, lightskyblue, lightslategray, lightslategrey, lightsteelblue, lightyellow, lime, limegreen, linen, magenta, maroon, mediumaquamarine, mediumblue, mediumorchid, mediumpurple, mediumseagreen, mediumslateblue, mediumspringgreen, mediumturquoise, mediumvioletred, midnightblue, mintcream, mistyrose, moccasin, navajowhite, navy, oldlace, olive, olivedrab, orange, orangered, orchid, palegoldenrod, palegreen, paleturquoise, palevioletred, papayawhip, peachpuff, peru, pink, plum, powderblue, purple, rebeccapurple, red, rosybrown, royalblue, saddlebrown, salmon, sandybrown, seagreen, seashell, sienna, silver, skyblue, slateblue, slategray, slategrey, snow, springgreen, steelblue, tan, teal, thistle, tomato, turquoise, violet, wheat, white, whitesmoke, yellow, yellowgreen */
/* #T#     the value of the color property can be set with the rgb function, as red, green, blue, alpha, with this syntax, rgb(red_num1, green_num1, blue_num1, alpha_num1), where red_num1, green_num1, and blue_num1 are numbers between 0 and 255, and alpha_num1 is a number between 0 and 1 with the alpha value */
/* #T#     the value of the color property can be set with the hsl function, as hue, saturation, lightness, alpha, with this syntax, hsl(hue_num1, saturation_num1%, lightness_num1%, alpha_num1%) */
/* #T#     the value of the color property can be set as a hexadecimal value starting with a hash #, with 4 channels, red, green, blue, alpha, 2 hexadecimal numbers per channel, so a value of the color property has 8 hexadecimal numbers, or 6 without alpha channel, for example #fc2ae5ff and #AB32CD */
p {color: beige;}
p {color: rgb(255, 144.58, 70, .7);}
p {color: hsl(140.86, 62%, 50%, 0%);} /* #| this color is transparent */
p {color: #AB32CD}

/* #T# the background-color property is a string that sets background color of its tag, the background is the place behing the text */
/* #T#     the value of the background-color property can be set the same as in the color property */
p {background-color: rgb(255, 144.58, 70, .7);}
/* # |------------------------------------------------------------- */

/* #C# Font properties */

/* # |------------------------------------------------------------- */
/* #T# the font-size property is a string that sets the font size of the text contents of its tag */
/* #T#     the predefined values of the font-size property are, by size from small to large: xx-small, x-small, smaller, small, medium, large, larger, x-large, xx-large */
/* #T#     the value of the font-size property can be set using units of measure, see below */
p {font-size: medium;}

/* #T# for the units of measure, there are absolute units of measure, which always have the same size, and there are relative units of measure, which vary in size depending on another value */

/* #T# using num1 as a numeric amount, the absolute units of measure are: */
/* #T#     num1mm, mm stands for millimeters */
/* #T#     num1cm, cm stands for centimeters */
/* #T#     num1in, in stands for inches */
/* #T#     num1px, px stands for pixels, the size of a pixel is determined by a ppi (pixels per inch) setting, commonly 96 ppi, so 1 pixel is 1/96 inches */
/* #T#     num1pt, pt stands for points, there are 72 points per inch, so 1 point is 1/72 inches */
/* #T#     num1pc, pc stands for picas, 1 pica is 12 points, or 12/72 = 1/6 inches */
p {font-size: 2pc;}

/* #T# using num1 as a numeric amount, the relative units of measure are: */
/* #T#     num1em, em is a unit of measure with the same size as the font, so a font of 12pt has 1em of 12pt, for example 2em duplicates the font size */
/* #T#     num1ex, ex is a unit of measure with about half the size of the font, so a font of 12pt has 1ex of 6pt, which comes from the height of the 'x' character, so in some fonts it may not be about half the size of the font */
/* #T#     num1ch, ch is a unit of measure with about half the size of the font, so a font of 12pt has 1ch of 6pt, which comes from the width of the '0' character, so in some fonts it may not be about half the size of the font */
/* #T#     num1rem, rem is a unit of measure like em, but relative to the font size of the parent tag */
/* #T#     num1vw, vw stands for viewport width, it's a unit of measure that is a percent of the size of the viewport width, so 100vw means a font size that covers the whole viewport width */
/* #T#     num1vh, vh stands for viewport height, it's a unit of measure that is a percent of the size of the viewport height, so 100vh means a font size that covers the whole viewport height */
/* #T#     num1vmin, vmin stands for viewport minimum length, the minimum between width and height, so if the viewport width is less than the viewport height, then vmin acts like vw, in the contrary case vmin acts like vh */
/* #T#     num1vmax, vmax stands for viewport maximum length, the maximum between width and height, so if the viewport width is greater than the viewport height, then vmax acts like vw, in the contrary case vmax acts like vh */
/* #T#     num1%, it's a percentage of the parent's font size */
p {font-size: 12pt;}
a {font-size: 1ex;} /* making an <a> tag a child of a <p> tag, text written inside the <a> tag is half the size of the text written inside the <p> tag */

/* #T# the font-family property is a string, or a list of strings separated by comma, that sets the font family of the text contents of its tag, a font family is a set of fonts that together cover different styles, such as normal, bold, italic, light, etcetera, each style has a font in the family */

/* the list of strings is called the font stack, the first font family in the font stack is used, unless it's not installed or available, in that case the second font in the font stack is used, and so on */
/* #T#     the predefined values of the font-family property are: serif, sans-serif, monospace, cursive, fantasy */
/* #T#     the value of the font-family property can be set using the names of installed fonts (common values are: Arial, "Courier New", Garamond, Georgia, Helvetica, Tahoma, "Times New Roman", "Trebuchet MS", Verdana), the installed font families can be found, in a Linux system, with the fc-list command, the output of the fc-list command has the format per line '/path/to/font1: font_family_name1: other_info1', the font_family_name1 string is a valid value for the font-family property */
p {font-family: "Courier New", Courier, monospace;} /* #| quotes are required around "Courier New", because the font family name has a space */

/* #T# the font-weight property is a string that sets the font weight of the text contents of its tag */
/* #T#     the predefined values of the font-weight property are: normal, bold (absolute value), lighter, bolder (value relative to the parent tag) */
/* #T#     the value of the font-weight property can be set numerically, with a number between 1 and 900 */
p {font-weight: 850;}

/* #T# the line-height property is a string that sets the height of the content of its tag */
/* #T#     the predefined value of the line-height property is: normal */
/* #T#     the value of the line-height property can be set using units of measure, the same as in the font-size property */
p {line-height: 5px;}

/* #T# the text-transform property is a string that sets the case of the text contents of its tag */
/* #T#     the predefined values of the text-transform property are: capitalize, lowercase, uppercase, none (none doesn't change the text) */
p {text-transform: capitalize;}

/* #T# the letter-spacing property is a string that sets the spacing between consecutive letters of the text contents of its tag */
/* #T#     the predefined value of the letter-spacing property is: normal */
/* #T#     the value of the letter-spacing property can be set using units of measure, the same as in the font-size property */
p {letter-spacing: .3cm;}

/* #T# the text-align property is a string that sets the horizontal alignment of the text contents of its tag */
/* #T#     the predefined values of the text-align property are: left, center, right, justify, start, end (start and end act like left and right with the 'ltr' value of the dir attribute (in a <p> tag, for example), and they act like right and left with the 'rtl' value of the dir attribute (in a <p> tag, for example) */
p {text-align: justify;}

/* #T# the font-style property is a string that sets the slant of the text contents of its tag */
/* #T#     the predefined values of the font-style property are: normal, italic, oblique */
p {font-style: italic;}

/* #T# the font-variant property is a string that sets whether or not to use small capitalization with the text contents of its tag */
/* #T#     the predefined values of the font-variant property are: normal, small-caps */
p {font-variant: small-caps;}

/* #T# the text-decoration property is a set of three strings, one for the text-decoration-line property, one for the text-decoration-color property, and one for the text-decoration-style property, see below */
p {text-decoration: underline green wavy;}

/* #T# the text-decoration-line property is a string that sets the placement of a horizontal line in the text contents of its tag */
/* #T#     the predefined values of the text-decoration-line property are: none, overline, line-through, underline */
p {text-decoration-line: overline;}

/* #T# the text-decoration-color property is a string that sets the color of the line created by the text-decoration-line property */
/* #T#     the value of the text-decoration-color property can be set the same as in the color property */
p {text-decoration-color: blueviolet;}

/* #T# the text-decoration-style property is a string that sets the style of the line created by the text-decoration-line property */
/* #T#     the predefined values of the text-decoration-style property are: none, solid, double, dashed, dotted, wavy */
p {text-decoration-style: double;}

/* #T# the word-spacing property is a string that sets the spacing between words in the text contents of its tag */
/* #T#     the predefined value of the word-spacing property is: normal */
/* #T#     the value of the word-spacing property can be set using units of measure, the same as in the font-size property */
p {word-spacing: 15mm;}

/* #T# the text-indent property is a string that sets the indentation of the first line of the text contents of its tag */
/* #T#     the value of the text-indent property can be set using units of measure, the same as in the font-size property */
/* #T#     the value of the text-indent property can be negative, if so, the indentation is made towards the opposite side */
p {text-indent: -0.5in;}
/* # |------------------------------------------------------------- */