/*
#   Basic syntax
*/

/* #T# Table of contents */

/* #C# Syntax to apply style to HTML tags */
/* #C# General values */
/* #C# Color properties */
/* #C# Font properties */
/* #C# Box properties */
/* #C# Image properties */
/* #C# Link pseudo-classes */

/* #T# Beginning of content */

/* # |------------------------------------------------------------- */
/* #T# apply a CSS file to an HTML file, using the <link> tag inside the HTML file, with the rel attribute having the value "stylesheet", and the href attribute linking to the CSS file */
/* # SYNTAX <link rel="stylesheet" href="/path/to/file1.css"> */
/* # |------------------------------------------------------------- */

/* #C# Syntax to apply style to HTML tags */

/* # |------------------------------------------------------------- */
/* #T# style is applied to HTML tags by via the properties of the HTML tags, each property can have several values, setting these values sets the style of the HTML tag */

/* # SYNTAX application of style to the HTML tag <tag1> that has the properties, property1 and property2, each with values, value1 and value2 */
/* # tag1                   */
/* # {                      */
/* #     property1: value1; */
/* #     property2: value2; */
/* # }                      */
/* #T# tags are called selectors in this context, so tag1 is the selector, properties and values act as key value pairs of each selector (of each tag) */

p
{
    color:red;
}
a
{
    color:green;
}
/* #T# the <p> tag and the <a> tag are being colored with the color property */

/* #T# the most basic selector is a tag, which changes all elements from that tag, but custom selectors can be created for given elements, with the class attribute and with the id attribute of said elements */

/* # SYNTAX applying style to elements that have the class attribute */
/* # tag1.class1 */
/* # {           */
/* #     style1  */
/* # }           */
/* #T# for this to work, there must be at least one element defined as <tag1 class="class1">, style1 will be applied to these elements */

p.class1 {color: rosybrown;}

/* #T# if tag1 is missing, then style1 is applied to all elements from all tags with the class attribute set to "class1" */

.class1
{
    color: chartreuse;
    font-weight: normal;
}

/* # SYNTAX applying style to elements that have the id attribute */
/* # #id1       */
/* # {          */
/* #     style1 */
/* # }          */
/* #T# for this to work, there must be at least one element defined as <tag1 id="id1">, style1 will be applied to these elements */

#id1
{
    color: darkolivegreen;
    font-weight: bold;
}

/* #T# a given style can be applied to a given tag that is nested inside another given tag, the resulting selector is called a nesting selector */

/* # SYNTAX applying style to a tag nested inside another */
/* # tag1 subtag1 subsubtag1 */
/* # {                       */
/* #     style1              */
/* # }                       */
/* #T# style1 is applied only to elements of subsubtag1, that are inside elements of subtag1, that are inside elements of tag1 */

article p a /* #| this style only applies to the <a> tag elements, that are inside a <p> tag, that is inside an <article> tag */
{
    color: violet;
}

/* #T# tags can have pseudo-classes, which are predefined classes of each tag */

/* # SYNTAX applying style to a pseudo-class */
/* # tag1:pseudo_class1 */
/* # {                  */
/* #     style1         */
/* # }                  */
/* #T# pseudo_class1 must be a pseudo-class of tag1 */

/* #T# there is a set of pseudo-classes that are general to all or most tags, the general pseudo-classes are */
/* #T#     the first-child pseudo-class acts as a selector over all the elements of tag1, that are in the first position of the list of children of its parent */
/* #T#     the nth-child(int1) pseudo-class acts as a selector over all the elements of tag1, that are in the int1-th position of the list of children of its parent */
/* #T#     the last-child pseudo-class acts as a selector over all the elements of tag1, that are in the last position of the list of children of its parent */
/* #T#     the nth-last-child(int1) pseudo-class acts as a selector over all the elements of tag1, that are in the int1-th last to first position of the list of children of its parent */

p:first-child, p:nth-child(5), p:last-child, p:nth-last-child(4)
{
    background-color: cadetblue;
}

/* #T# a given style can be applied to several different selectors, this list of selectors is called a grouping selector */

/* # SYNTAX applying style to several different selectors */
/* # selector1, selector2, selectorN */
/* # {                               */
/* #     style1                      */
/* # }                               */
/* #T# selector1 through selectorN can each be a tag1, a class selector, an id selector, a nesting selector, a pseudo-class */

h1, article p a, .class1, #id1
{
    background-color:darkgreen;
    padding: 0.5cm;
}
/* # |------------------------------------------------------------- */

/* #C# General values */

/* # |------------------------------------------------------------- */
/* #T# there are a few values that are general, and so can be applied to most properties */

/* #T# the inherit value means that the property inherits the value from the parent tag */
p {color: inherit;}

/* #T# the initial value means that the property gets its value from the browser default */
p {color: initial;}

/* #T# the unset value means that if the parent tag has a value, then the value is 'inherit', but else if the parent has no value, then the value is 'initial' */
p {color: unset;}
/* # |------------------------------------------------------------- */

/* #C# Color properties */

/* # |------------------------------------------------------------- */
/* #T# the color property is a string that sets the color of the text contents of its element */
/* #T#     the predefined values of the color property are: aliceblue, antiquewhite, aqua, aquamarine, azure, beige, bisque, black, blanchedalmond, blue, blueviolet, brown, burlywood, cadetblue, chartreuse, chocolate, coral, cornflowerblue, cornsilk, crimson, cyan, darkcyan, darkgoldenrod, darkgray, darkgreen, darkgrey, darkkhaki, darkmagenta, darkolivegreen, darkorange, darkorchid, darkred, darksalmon, darkseagreen, darkslateblue, darkslategray, darkslategrey, darkturquoise, darkviolet, deeppink, deepskyblue, dimgray, dimgrey, dodgerblue, firebrick, floralwhite, forestgreen, fuchsia, gainsboro, ghostwhite, gold, goldenrod, gray, green, greenyellow, grey, honeydew, hotpink, indianred, indigo, ivory, khaki, lavender, lavenderblush, lawngreen, lemonchiffon, lightblue, lightcoral, lightcyan, lightgoldenrodyellow, lightgray, lightgreen, lightgrey, lightpink, lightsalmon, lightseagreen, lightskyblue, lightslategray, lightslategrey, lightsteelblue, lightyellow, lime, limegreen, linen, magenta, maroon, mediumaquamarine, mediumblue, mediumorchid, mediumpurple, mediumseagreen, mediumslateblue, mediumspringgreen, mediumturquoise, mediumvioletred, midnightblue, mintcream, mistyrose, moccasin, navajowhite, navy, oldlace, olive, olivedrab, orange, orangered, orchid, palegoldenrod, palegreen, paleturquoise, palevioletred, papayawhip, peachpuff, peru, pink, plum, powderblue, purple, rebeccapurple, red, rosybrown, royalblue, saddlebrown, salmon, sandybrown, seagreen, seashell, sienna, silver, skyblue, slateblue, slategray, slategrey, snow, springgreen, steelblue, tan, teal, thistle, tomato, turquoise, violet, wheat, white, whitesmoke, yellow, yellowgreen */
/* #T#     the value of the color property can be set with the rgb function, as red, green, blue, alpha, with this syntax, rgb(red_num1, green_num1, blue_num1, alpha_num1), where red_num1, green_num1, and blue_num1 are numbers between 0 and 255, and alpha_num1 is a number between 0 and 1 with the alpha value */
/* #T#     the value of the color property can be set with the hsl function, as hue, saturation, lightness, alpha, with this syntax, hsl(hue_num1, saturation_num1%, lightness_num1%, alpha_num1%) */
/* #T#     the value of the color property can be set as a hexadecimal value starting with a hash #, with 4 channels, red, green, blue, alpha, 2 hexadecimal numbers per channel, so a value of the color property has 8 hexadecimal numbers, or 6 without alpha channel, for example #fc2ae5ff and #AB32CD */
p {color: beige;}
p {color: rgb(255, 144.58, 70, .7);}
p {color: hsl(140.86, 62%, 50%, 0%);} /* #| this color is transparent */
p {color: #AB32CD}

/* #T# the background-color property is a string that sets background color of its element, the background is the place behing the text */
/* #T#     the value of the background-color property can be set the same as in the color property */
p {background-color: rgb(255, 144.58, 70, .7);}
/* # |------------------------------------------------------------- */

/* #C# Font properties */

/* # |------------------------------------------------------------- */
/* #T# the font property is a set of up to five strings, one for the font-style property, one for the font-weight property, one for the font-size property, one for the line-height property, and one for the font-family property, see below */
/* #T#     it must be noted that the font-size property and the line-height property are written together with this syntax, font-size_value1/line-height_value1 */
p {font: italic bold 14pt/2 courier;}

/* #T# the font-size property is a string that sets the font size of the text contents of its element */
/* #T#     the predefined values of the font-size property are, by size from small to large: xx-small, x-small, smaller, small, medium, large, larger, x-large, xx-large */
/* #T#     the value of the font-size property can be set using units of measure, see below */
p {font-size: medium;}

/* #T# for the units of measure, there are absolute units of measure, which always have the same size, and there are relative units of measure, which vary in size depending on another value */

/* #T# using num1 as a numeric amount, the absolute units of measure are: */
/* #T#     num1mm, mm stands for millimeters */
/* #T#     num1cm, cm stands for centimeters */
/* #T#     num1in, in stands for inches */
/* #T#     num1px, px stands for pixels, the size of a pixel is determined by a ppi (pixels per inch) setting, commonly 96 ppi, so 1 pixel is 1/96 inches */
/* #T#     num1pt, pt stands for points, there are 72 points per inch, so 1 point is 1/72 inches */
/* #T#     num1pc, pc stands for picas, 1 pica is 12 points, or 12/72 = 1/6 inches */
p {font-size: 2pc;}

/* #T# using num1 as a numeric amount, the relative units of measure are: */
/* #T#     num1em, em is a unit of measure with the same size as the font, so a font of 12pt has 1em of 12pt, for example 2em duplicates the font size */
/* #T#     num1ex, ex is a unit of measure with about half the size of the font, so a font of 12pt has 1ex of 6pt, which comes from the height of the 'x' character, so in some fonts it may not be about half the size of the font */
/* #T#     num1ch, ch is a unit of measure with about half the size of the font, so a font of 12pt has 1ch of 6pt, which comes from the width of the '0' character, so in some fonts it may not be about half the size of the font */
/* #T#     num1rem, rem is a unit of measure like em, but relative to the font size of the parent tag */
/* #T#     num1vw, vw stands for viewport width, it's a unit of measure that is a percent of the size of the viewport width, so 100vw means a font size that covers the whole viewport width */
/* #T#     num1vh, vh stands for viewport height, it's a unit of measure that is a percent of the size of the viewport height, so 100vh means a font size that covers the whole viewport height */
/* #T#     num1vmin, vmin stands for viewport minimum length, the minimum between width and height, so if the viewport width is less than the viewport height, then vmin acts like vw, in the contrary case vmin acts like vh */
/* #T#     num1vmax, vmax stands for viewport maximum length, the maximum between width and height, so if the viewport width is greater than the viewport height, then vmax acts like vw, in the contrary case vmax acts like vh */
/* #T#     num1%, it's a percentage of the parent's font size */
p {font-size: 12pt;}
a {font-size: 1ex;} /* making an <a> tag a child of a <p> tag, text written inside the <a> tag is half the size of the text written inside the <p> tag */

/* #T# the font-family property is a string, or a list of strings separated by comma, that sets the font family of the text contents of its element, a font family is a set of fonts that together cover different styles, such as normal, bold, italic, light, etcetera, each style has a font in the family */

/* the list of strings is called the font stack, the first font family in the font stack is used, unless it's not installed or available, in that case the second font in the font stack is used, and so on */
/* #T#     the predefined values of the font-family property are: serif, sans-serif, monospace, cursive, fantasy */
/* #T#     the value of the font-family property can be set using the names of installed fonts (common values are: Arial, "Courier New", Garamond, Georgia, Helvetica, Tahoma, "Times New Roman", "Trebuchet MS", Verdana), the installed font families can be found, in a Linux system, with the fc-list command, the output of the fc-list command has the format per line '/path/to/font1: font_family_name1: other_info1', the font_family_name1 string is a valid value for the font-family property */
p {font-family: "Courier New", Courier, monospace;} /* #| quotes are required around "Courier New", because the font family name has a space */

/* #T# the font-weight property is a string that sets the font weight of the text contents of its element */
/* #T#     the predefined values of the font-weight property are: normal, bold (absolute value), lighter, bolder (value relative to the parent tag) */
/* #T#     the value of the font-weight property can be set numerically, with a number between 1 and 900 */
p {font-weight: 850;}

/* #T# the line-height property is a string that sets the height of the content of its element */
/* #T#     the predefined value of the line-height property is: normal */
/* #T#     the value of the line-height property can be set using units of measure, the same as in the font-size property */
p {line-height: 5px;}

/* #T# the text-transform property is a string that sets the case of the text contents of its element */
/* #T#     the predefined values of the text-transform property are: capitalize, lowercase, uppercase, none (none doesn't change the text) */
p {text-transform: capitalize;}

/* #T# the letter-spacing property is a string that sets the spacing between consecutive letters of the text contents of its element */
/* #T#     the predefined value of the letter-spacing property is: normal */
/* #T#     the value of the letter-spacing property can be set using units of measure, the same as in the font-size property */
p {letter-spacing: .3cm;}

/* #T# the text-align property is a string that sets the horizontal alignment of the text contents of its element */
/* #T#     the predefined values of the text-align property are: left, center, right, justify, start, end (start and end act like left and right with the 'ltr' value of the dir attribute (in a <p> tag, for example), and they act like right and left with the 'rtl' value of the dir attribute (in a <p> tag, for example) */
p {text-align: justify;}

/* #T# the font-style property is a string that sets the slant of the text contents of its element */
/* #T#     the predefined values of the font-style property are: normal, italic, oblique */
p {font-style: italic;}

/* #T# the font-variant property is a string that sets whether or not to use small capitalization with the text contents of its element */
/* #T#     the predefined values of the font-variant property are: normal, small-caps */
p {font-variant: small-caps;}

/* #T# the text-decoration property is a set of three strings, one for the text-decoration-line property, one for the text-decoration-color property, and one for the text-decoration-style property, at least the text-decoration-line property is mandatory, see below */
p {text-decoration: underline green wavy;}

/* #T# the text-decoration-line property is a string that sets the placement of a horizontal line in the text contents of its element */
/* #T#     the predefined values of the text-decoration-line property are: none, overline, line-through, underline */
p {text-decoration-line: overline;}

/* #T# the text-decoration-color property is a string that sets the color of the line created by the text-decoration-line property */
/* #T#     the value of the text-decoration-color property can be set the same as in the color property */
p {text-decoration-color: blueviolet;}

/* #T# the text-decoration-style property is a string that sets the style of the line created by the text-decoration-line property */
/* #T#     the predefined values of the text-decoration-style property are: none, solid, double, dashed, dotted, wavy */
p {text-decoration-style: double;}

/* #T# the word-spacing property is a string that sets the spacing between words in the text contents of its element */
/* #T#     the predefined value of the word-spacing property is: normal */
/* #T#     the value of the word-spacing property can be set using units of measure, the same as in the font-size property */
p {word-spacing: 15mm;}

/* #T# the text-indent property is a string that sets the indentation of the first line of the text contents of its element */
/* #T#     the value of the text-indent property can be set using units of measure, the same as in the font-size property */
/* #T#     the value of the text-indent property can be negative, if so, the indentation is made towards the opposite side */
p {text-indent: -0.5in;}
/* # |------------------------------------------------------------- */

/* #C# Box properties */

/* # |------------------------------------------------------------- */
/* #T# each element with content is inside a box, this box has four layers, from outer to inner, these layers are: margin, border, padding, and content */

/* #T# the margin property is a set of up to four strings */

/* #T# if it's one string then the string sets the margins of the four sides */

/* #T# if it's a set of two strings then the first string sets the margin-top and margin-bottom properties, and the second string sets the margin-left and margin-right properties */

/* #T# if it's a set of three strings then the first string sets the margin-top property, the second string sets the margin-left and margin-right properties, and the third string sets the margin-bottom property */

/* #T# and if it's a set of four strings then the first string sets the margin-top property, the second string sets the margin-right property, the third string sets the margin-bottom property, and the fourth string sets the margin-left property, see below */
/* #T#     the value of the margin property can be set using units of measure, the same as in the font-size property */
/* #T#     the value of the margin property means how distant its element must be placed from consecutive elements, it can be negative, if so, it means how close its element must be placed from consecutive elements */
/* #T#     the value of the margin property from two adjacent sides of consecutive elements is merged, this is margin collapsing, two adjacent margins are collapsed into one, the one with the maximum margin when both margins are positive, or the one with the minimum margin when both margins are negative, or the addition of the margins when one is positive and the other negative */
p {margin: 1px 5px -15px;}

/* #T# the margin-top property is a string that sets the top margin of the box of its element */
/* #T#     the value of the margin-top property can be set using units of measure, the same as in the font-size property */
p {margin-top: 3ch}

/* #T# the margin-right property is a string that sets the right margin of the box of its element */
/* #T#     the value of the margin-right property can be set using units of measure, the same as in the font-size property */
p {margin-right: 4vh;}

/* #T# the margin-bottom property is a string that sets the bottom margin of the box of its element */
/* #T#     the value of the margin-bottom property can be set using units of measure, the same as in the font-size property */
p {margin-bottom: 1.4rem;}

/* #T# the margin-left property is a string that sets the left margin of the box of its element */
/* #T#     the value of the margin-left property can be set using units of measure, the same as in the font-size property */
p {margin-left: 10vh;}

/* #T# the border property is a set of three strings, one for the border-style property, one for the border-width property, and one for the border-color property, at least the border-style property is mandatory, see below */
p {border: groove 3px cadetblue;}

/* #T# the border-style property is a string that sets the style of the border of the box of its element */
/* #T#     the predefined values of the border-style property are: none, hidden, solid, double, dashed, dotted, ridge, groove, inset, outset */
p {border-style: solid;}

/* #T# the border-width property is a set of up to four strings that sets the width of the border of the box of its element, the four strings are defined the same as in the margin property (except the border-width property can't have negative values) */
/* #T#     the value of the border-width property can be set using units of measure, the same as in the font-size property */
p {border-width: 3pt 6pt;}

/* #T# the border-color property is a string that sets the color of the border of the box of its element */
/* #T#     the value of the border-color property can be set the same as in the color property */
p {border-color: chartreuse;}

/* #T# the border-top property is a set of three strings, one for the border-top-style property, one for the border-top-width property, and one for the border-top-color property, at least the border-top-style property is mandatory, see below */
p {border-top: ridge .3em navy;}

/* #T# the border-top-style property is a string that sets the style of the top of the border */
/* #T#     the predefined values of the border-top-style property are: none, hidden, solid, double, dashed, dotted, ridge, groove, inset, outset */
p {border-top-style: outset;}

/* #T# the border-top-width property is a string that sets the width of the top of the border */
/* #T#     the value of the border-top-width property can be set using units of measure, the same as in the font-size property */
p {border-top-width: 22px;}

/* #T# the border-top-color property is a string that sets the color of the top of the border */
/* #T#     the value of the border-top-color property can be set the same as in the color property */
p {border-top-color: olivedrab;}

/* #T# the border-right property is a set of three strings, one for the border-right-style property, one for the border-right-width property, and one for the border-right-color property, at least the border-right-style property is mandatory, see below */
p {border-right: ridge .3em navy;}

/* #T# the border-right-style property is a string that sets the style of the right of the border */
/* #T#     the predefined values of the border-right-style property are: none, hidden, solid, double, dashed, dotted, ridge, groove, inset, outset */
p {border-right-style: outset;}

/* #T# the border-right-width property is a string that sets the width of the right of the border */
/* #T#     the value of the border-right-width property can be set using units of measure, the same as in the font-size property */
p {border-right-width: 22px;}

/* #T# the border-right-color property is a string that sets the color of the right of the border */
/* #T#     the value of the border-right-color property can be set the same as in the color property */
p {border-right-color: olivedrab;}

/* #T# the border-bottom property is a set of three strings, one for the border-bottom-style property, one for the border-bottom-width property, and one for the border-bottom-color property, at least the border-bottom-style property is mandatory, see below */
p {border-bottom: ridge .3em navy;}

/* #T# the border-bottom-style property is a string that sets the style of the bottom of the border */
/* #T#     the predefined values of the border-bottom-style property are: none, hidden, solid, double, dashed, dotted, ridge, groove, inset, outset */
p {border-bottom-style: outset;}

/* #T# the border-bottom-width property is a string that sets the width of the bottom of the border */
/* #T#     the value of the border-bottom-width property can be set using units of measure, the same as in the font-size property */
p {border-bottom-width: 22px;}

/* #T# the border-bottom-color property is a string that sets the color of the bottom of the border */
/* #T#     the value of the border-bottom-color property can be set the same as in the color property */
p {border-bottom-color: olivedrab;}

/* #T# the border-left property is a set of three strings, one for the border-left-style property, one for the border-left-width property, and one for the border-left-color property, at least the border-left-style property is mandatory, see below */
p {border-left: ridge .3em navy;}

/* #T# the border-left-style property is a string that sets the style of the left of the border */
/* #T#     the predefined values of the border-left-style property are: none, hidden, solid, double, dashed, dotted, ridge, groove, inset, outset */
p {border-left-style: outset;}

/* #T# the border-left-width property is a string that sets the width of the left of the border */
/* #T#     the value of the border-left-width property can be set using units of measure, the same as in the font-size property */
p {border-left-width: 22px;}

/* #T# the border-left-color property is a string that sets the color of the left of the border */
/* #T#     the value of the border-left-color property can be set the same as in the color property */
p {border-left-color: olivedrab;}

/* #T# the padding property is a set of up to four strings that sets the padding of the box of its element, the four strings are defined the same as in the border-width property */
p {padding: .4cm;}

/* #T# the padding-top property is a string that sets the top padding */
/* #T#     the value of the padding-top property can be set using units of measure, the same as in the font-size property */
p {padding-top: .3in;}

/* #T# the padding-right property is a string that sets the right padding */
/* #T#     the value of the padding-right property can be set using units of measure, the same as in the font-size property */
p {padding-right: .1in;}

/* #T# the padding-bottom property is a string that sets the bottom padding */
/* #T#     the value of the padding-bottom property can be set using units of measure, the same as in the font-size property */
p {padding-bottom: .1in;}

/* #T# the padding-left property is a string that sets the left padding */
/* #T#     the value of the padding-left property can be set using units of measure, the same as in the font-size property */
p {padding-left: .1in;}
/* # |------------------------------------------------------------- */

/* #C# Image properties */

/* # |------------------------------------------------------------- */
/* #T# the background-image property is a function that returns an image file, that will be set as the background of the contents of its tag */
/* #T#     the value of the background-image property can be set using the url function, it receives a string with the location of a file, for local files the location is given directly, as url(/path/to/file1) with an absolute path, or url(../../path/to/file1) with a relative path, for files accessed with the HTTP protocol the URL is given, as url(http://url1) */
p {background-image: url(local_image1.png);}

/* #T# the background-size property is a string that sets the size of the background image */
/* #T#     the value of the background-size property can be set using units of measure, the same as in the font-size property */
p {background-size: 70px;}

/* #T# the background-repeat property is a set of up to two strings, the first to set the horizontal repeating pattern, and the second to set the vertical repeating pattern, if given only one string then it applies to both dimensions */
/* #T#     the predefined values of the background-repeat property are: no-repeat, repeat, repeat-x, repeat-y, round (repeats without cropping the image, by changing the aspect ratio), space (repeats without cropping the image, by spacing the repeated images) */
p {background-repeat: repeat no-repeat;} /* #| equivalent to only having repeat-x */

/* #T# the background-position property is a set of up to two strings, one to set the horizontal position of the image before repeating it, and one to set to vertical position of the image before repeating it, if given only one string, the other is assumed to be 'center' */
/* #T#     the predefined values of the background-position property are, for the horizontal position, left, center, right, and for the vertical position, top, center, bottom */
p {background-position: bottom right;}
/* # |------------------------------------------------------------- */

/* #C# Link pseudo-classes */

/* # |------------------------------------------------------------- */
/* #T# tags that work as links, like the <a> tag and the <button> tag, have a particular set of pseudo-classes, that serve to apply style to the elements of those tags when receiving events, such as the mouse hovering over the elements of those tags, or being clicked on */

/* #T# the main pseudo-classes of links are, link, visited, hover, and active, it's recommended to apply style in that order, for example the link pseudo-class and the visited pseudo-class may override some of the other pseudo-classes, and so they must be placed first */
/* #T#     the link pseudo-class selects links that have not been visited */
/* #T#     the visited pseudo-class selects links that have already been visited in the browser history */
/* #T#     the hover pseudo-class selects links that have the mouse hovering over */
/* #T#     the active pseudo-class selects links that are being clicked on */

a:link
{
    color:crimson;
}
a:visited
{
    color: steelblue;
}
a:hover
{
    color:chartreuse;
}
a:active
{
    color: blueviolet;
}
/* # |------------------------------------------------------------- */