/*
#   Basic syntax
*/

/* #T# Table of contents */

/* #C# Syntax to apply style to HTML tags */
/* #C# General values */
/* #C# Color properties */
/* #C# Font properties */
/* #C# Box properties */
/* #C# - Positioning properties */
/* #C# Image properties */
/* #C# Text properties */
/* #C# Link pseudo-classes */
/* #C# Transformation properties */
/* #C# At rules */

/* #T# Beginning of content */

/* # |------------------------------------------------------------- */
/* #T# apply a CSS file to an HTML file, using the <link> tag inside the HTML file, with the rel attribute having the value "stylesheet", and the href attribute linking to the CSS file */
/* # SYNTAX <link rel="stylesheet" href="/path/to/file1.css"> */
/* # |------------------------------------------------------------- */

/* #C# Syntax to apply style to HTML tags */

/* # |------------------------------------------------------------- */
/* #T# style is applied to HTML tags by via the properties of the HTML tags, each property can have several values, setting these values sets the style of the HTML tag */

/* # SYNTAX application of style to the HTML tag <tag1> that has the properties, property1 and property2, each with values, value1 and value2 */
/* # tag1                   */
/* # {                      */
/* #     property1: value1; */
/* #     property2: value2; */
/* # }                      */
/* #T# tags are called selectors in this context, so tag1 is the selector, properties and values act as key value pairs of each selector (of each tag) */

p
{
    color:red;
}
a
{
    color:green;
}
/* #T# the <p> tag and the <a> tag are being colored with the color property */

/* #T# the most basic selector is a tag, which changes all elements from that tag, but custom selectors can be created for given elements, with the class attribute and with the id attribute of said elements */

/* # SYNTAX applying style to elements that have the class attribute */
/* # tag1.class1 */
/* # {           */
/* #     style1  */
/* # }           */
/* #T# for this to work, there must be at least one element defined as <tag1 class="class1">, style1 will be applied to these elements */

p.class1 {color: rosybrown;}

/* #T# if tag1 is missing, then style1 is applied to all elements from all tags with the class attribute set to "class1" */

.class1
{
    color: chartreuse;
    font-weight: normal;
}

/* # SYNTAX applying style to elements that have the id attribute */
/* # #id1       */
/* # {          */
/* #     style1 */
/* # }          */
/* #T# for this to work, there must be at least one element defined as <tag1 id="id1">, style1 will be applied to these elements */

#id1
{
    color: darkolivegreen;
    font-weight: bold;
}

/* #T# a given style can be applied to a given tag that is nested inside another given tag, the resulting selector is called a nesting selector */

/* # SYNTAX applying style to a tag nested inside another */
/* # tag1 subtag1 subsubtag1 */
/* # {                       */
/* #     style1              */
/* # }                       */
/* #T# style1 is applied only to elements of subsubtag1, that are inside elements of subtag1, that are inside elements of tag1 */

article p a /* #| this style only applies to the <a> tag elements, that are inside a <p> tag, that is inside an <article> tag */
{
    color: violet;
}

/* #T# tags can have pseudo-classes, which are predefined classes of each tag */

/* # SYNTAX applying style to a pseudo-class */
/* # tag1:pseudo_class1 */
/* # {                  */
/* #     style1         */
/* # }                  */
/* #T# pseudo_class1 must be a pseudo-class of tag1 */

/* #T# there is a set of pseudo-classes that are general to all or most tags, the general pseudo-classes are */
/* #T#     the :first-child pseudo-class acts as a selector over all the elements of tag1, that are in the first position of the list of children of its parent */
/* #T#     the :nth-child(int1) pseudo-class acts as a selector over all the elements of tag1, that are in the int1-th position of the list of children of its parent */
/* #T#     the :last-child pseudo-class acts as a selector over all the elements of tag1, that are in the last position of the list of children of its parent */
/* #T#     the :nth-last-child(int1) pseudo-class acts as a selector over all the elements of tag1, that are in the int1-th last to first position of the list of children of its parent */
/* #T#     the :first-of-type pseudo-class acts as a selector over the first element that is of the same type as tag1, inside every parent element */
/* #T#     the :nth-of-type(int1) pseudo-class acts as selector over the int1-th element that is of the same type as tag1, inside every parent element */
/* #T#     the :last-of-type pseudo-class acts as a selector over the last element that is of the same type as tag1, inside every parent element */
/* #T#     the :nth-last-of-type(int1) pseudo-class acts as a selector over the int1-th last to first element that is of the same type as tag1, inside every parent element */

p:first-child, p:nth-child(5), p:last-child, p:nth-last-child(4)
{
    background-color: cadetblue;
}
p:first-of-type, p:nth-of-type(3), p:last-of-type, p:nth-last-of-type(2)
{
    color: goldenrod;
}

/* #T# the :root pseudo-class can be used without a tag, it represents the <html> root element of the document */
:root
{
    color: aquamarine;
}

/* #T# tags can have pseudo-elements, which are predefined parts of each tag */

/* # SYNTAX applying style to a pseudo-element */
/* # tag1::pseudo_element1 */
/* # {                     */
/* #     style1            */
/* # }                     */
/* #T# pseudo_element1 must be a pseudo-element of tag1 */

/* #T# there is a set of pseudo-elements that are general to all or most tags, the general pseudo-elements are */
/* #T#     the ::first-letter pseudo-element acts as a selector over the first letter of the contents of tag1 */
/* #T#     the ::first-line pseudo-element acts as a selector over the first line (up to the first newline) of the contents of tag1 */
/* #T#     the ::before pseudo-element is used along with the content property, it places the value of the content property before tag1 */
/* #T#     the ::after pseudo-element is used along with the content property, it places the value of the content property after tag1 */

p::first-letter
{
    font-size: 20px;
}
p::first-line
{
    color: green;
}
p::before
{
    content: "Before";
}
p::after
{
    content: "After";
    background-color: brown;
}

/* #T# the universal selector is the asterisk *, it selects all the possible elements */

/* # SYNTAX applying style with the universal selector */
/* # tag1 *     */
/* # {          */
/* #     style1 */
/* # }          */
/* #T# tag1 is optional, style1 is applied to all children and grandchildren of tag1 */

p *
{
    color: peru;
}

/* the child selector is the greater than sign >, it selects the children, but not the grandchildren */

/* # SYNTAX applying style with the child selector */
/* # tag1 > tag2 */
/* # {           */
/* #     style1  */
/* # }           */
/* #T# style1 is applied to the children of tag1 that are of type tag2, but not to the grandchildren */

p > a
{
    color: tomato;
}

/* # SYNTAX applying style only to the children but not the grandchildren */
/* # tag1 > *                */
/* # {                       */
/* #     property1: value1;  */
/* # }                       */
/* # tag1 > * > *            */
/* # {                       */
/* #     property1: initial; */
/* # }                       */

p > *
{
    color: tomato;
}
p > * > *
{
    color: initial;
} /* #| this syntax is necessary because styles cascade to children and grandchildren */

/* #T# the adjacent selector is the plus sign +, it selects an element only if it's the next sibling */

/* # SYNTAX applying style with the adjacent selector */
/* # tag1 + tag2 */
/* # {           */
/* #     style1  */
/* # }           */
/* #T# style1 is applied in all cases where tag2 is the next sibling after tag1 */

p + a
{
    color: blue;
}

/* the following siblings selector is the tilde ~, it selects all the following siblings */

/* # SYNTAX applying style with the following siblings selector */
/* # tag1 ~ tag2 */
/* # {           */
/* #     style1  */
/* # }           */
/* #T# style1 is applied to all the elements of tag2 that are following siblings of tag1 */

p ~ a
{
    color: brown;
}

/* #T# the attribute selector is made with pairs of brackets [], it selects elements that have specific attributes, the following are the ways to use the attribute selector */
/* #T#     tag1[attribute1], selects elements defined as <tag1 attribute1="valueN"> */
/* #T#     tag1[attribute1="value1"], selects elements defined as <tag1 attribute1="value1"> */
/* #T#     tag1[attribute1="value1"][attribute2="value2"], selects elements defined as <tag1 attribute1="value1" attribute2="value2"> */
/* #T#     tag1[attribute1^="pattern_string1"], selects elements defined as <tag1 attribute1="value1">, such that value1 begins with pattern_string1 */
/* #T#     tag1[attribute1$="pattern_string1"], selects elements defined as <tag1 attribute1="value1">, such that value1 ends with pattern_string1 */
/* #T#     tag1[attribute1*="pattern_string1"], selects elements defined as <tag1 attribute1="value1">, such that value1 contains pattern_string1 */

p[dir]
{
    color: cornflowerblue;
}
p[dir="rtl"]
{
    color: brown;
}
p[dir="rtl"][title="title1"]
{
    color: aquamarine;
}
p[dir^="r"]
{
    color: yellow;
}
p[dir$="l"]
{
    color: red;
}
p[dir*="t"]
{
    color: orange;
}

/* #T# a given style can be applied to several different selectors, this list of selectors is called a grouping selector */

/* # SYNTAX applying style to several different selectors */
/* # selector1, selector2, selectorN */
/* # {                               */
/* #     style1                      */
/* # }                               */
/* #T# selector1 through selectorN can each be a tag1, a class selector, an id selector, a nesting selector, a pseudo-class, a pseudo-element, etcetera */

h1, article p a, .class1, #id1
{
    background-color:darkgreen;
    padding: 0.5cm;
}

/* #T# the precedence with which properties overwrite each other is called specificity in this context */

/* #T# the basic precedence is that the last time a property receives style, is the one that applies */
p
{
    color: red;
}
p
{
    color: blue;
}
/* #| the <p> tag will be colored blue */

/* #T# nesting selectors take precedence over non-nested tags */
div p
{
    color: green;
}
p
{
    color: blue;
}
/* #| the <p> tags inside the <div> tags will be colored green */

/* #T# an id selector, takes precedence over a class selector, which takes precedence over a tag selector */
p
{
    color: blue;
}
p.c1
{
    color: darkgreen
}
#i1
{
    color: magenta
}
/* #| the <p id="i1"> tag will be colored magenta, the <p class="c1"> tag will be colored darkgreen, and any other <p> tag will be colored blue */

/* #T# variables can be created using this syntax */

/* # SYNTAX --var1: value1; */

/* #T# variables are used with the var function */

/* # SYNTAX property1: var(--var1); */
p
{
    --color1: gold;
    color: var(--color1)
}

/* #T# to make a variable global, it must be declared in the :root pseudo-class */
:root
{
    --color1: red;
}
p
{
    color: var(--color1)
}

/* #T# escape sequences are used inside strings, they are introduced with a backslash */
/* #T#     \\, means a literal backslash */
/* #T#     \A, means a newline */
/* #T#     \", means a literal double quote (used inside double quotes) */
/* #T#     \', means a literal single quote (used inside single quotes) */
/* #T#     \num1, means an unicode character, with code point num1, where num1 is a hexadecimal number of up to six digits
p::before
{
    content: "\A"
}
/* # |------------------------------------------------------------- */

/* #C# General values */

/* # |------------------------------------------------------------- */
/* #T# there are a few values that are general, and so can be applied to most properties */

/* #T# the inherit value means that the property inherits the value from the parent tag */
p {color: inherit;}

/* #T# the initial value means that the property gets its value from the browser default */
p {color: initial;}

/* #T# the unset value means that if the parent tag has a value, then the value is 'inherit', but else if the parent has no value, then the value is 'initial' */
p {color: unset;}

/* #T# values can be prefixed to work with a given browser. The `-moz-` vendor prefix is used for values with the Firefox browser, the `-webkit-` vendor prefix is used with the Chrome browser, the `-ms-` vendor prefix is used with the Edge browser */
/* # |------------------------------------------------------------- */

/* #C# Color properties */

/* # |------------------------------------------------------------- */
/* #T# the color property is a string that sets the color of the text contents of its element */
/* #T#     the predefined values of the color property are: aliceblue, antiquewhite, aqua, aquamarine, azure, beige, bisque, black, blanchedalmond, blue, blueviolet, brown, burlywood, cadetblue, chartreuse, chocolate, coral, cornflowerblue, cornsilk, crimson, cyan, darkcyan, darkgoldenrod, darkgray, darkgreen, darkgrey, darkkhaki, darkmagenta, darkolivegreen, darkorange, darkorchid, darkred, darksalmon, darkseagreen, darkslateblue, darkslategray, darkslategrey, darkturquoise, darkviolet, deeppink, deepskyblue, dimgray, dimgrey, dodgerblue, firebrick, floralwhite, forestgreen, fuchsia, gainsboro, ghostwhite, gold, goldenrod, gray, green, greenyellow, grey, honeydew, hotpink, indianred, indigo, ivory, khaki, lavender, lavenderblush, lawngreen, lemonchiffon, lightblue, lightcoral, lightcyan, lightgoldenrodyellow, lightgray, lightgreen, lightgrey, lightpink, lightsalmon, lightseagreen, lightskyblue, lightslategray, lightslategrey, lightsteelblue, lightyellow, lime, limegreen, linen, magenta, maroon, mediumaquamarine, mediumblue, mediumorchid, mediumpurple, mediumseagreen, mediumslateblue, mediumspringgreen, mediumturquoise, mediumvioletred, midnightblue, mintcream, mistyrose, moccasin, navajowhite, navy, oldlace, olive, olivedrab, orange, orangered, orchid, palegoldenrod, palegreen, paleturquoise, palevioletred, papayawhip, peachpuff, peru, pink, plum, powderblue, purple, rebeccapurple, red, rosybrown, royalblue, saddlebrown, salmon, sandybrown, seagreen, seashell, sienna, silver, skyblue, slateblue, slategray, slategrey, snow, springgreen, steelblue, tan, teal, thistle, tomato, turquoise, violet, wheat, white, whitesmoke, yellow, yellowgreen */
/* #T#     the value of the color property can be set with the rgb function, as red, green, blue, with this syntax, rgb(red_num1, green_num1, blue_num1), where red_num1, green_num1, and blue_num1 are numbers between 0 and 255, or also with the rgba function that accepts an alpha argument, rgba(red_num1, green_num1, blue_num1, alpha_num1), where alpha_num1 is a number between 0 and 1 with the alpha value */
/* #T#     the value of the color property can be set with the hsl function, as hue, saturation, lightness, with this syntax, hsl(hue_num1, saturation_num1%, lightness_num1%), or also with the hsla function that accepts an alpha argument, hsla(hue_num1, saturation_num1%, lightness_num1%, alpha_num1%) */
/* #T#     the value of the color property can be set as a hexadecimal value starting with a hash #, with 4 channels, red, green, blue, alpha, 2 hexadecimal numbers per channel, so a value of the color property has 8 hexadecimal numbers, or 6 without alpha channel, for example #fc2ae5ff and #AB32CD */
p {color: beige;}
p {color: rgba(255, 144.58, 70, .7);}
p {color: hsla(140.86, 62%, 50%, 0%);} /* #| this color is transparent */
p {color: #AB32CD}

/* #T# the background-color property is a string that sets background color of its element, the background is the place behing the text */
/* #T#     the value of the background-color property can be set the same as in the color property */
p {background-color: rgb(255, 144.58, 70);}
/* # |------------------------------------------------------------- */

/* #C# Font properties */

/* # |------------------------------------------------------------- */
/* #T# the font property is a set of up to five strings, one for the font-style property, one for the font-weight property, one for the font-size property, one for the line-height property, and one for the font-family property, see below */
/* #T#     the font-size property and the line-height property are written separated by a slash like this, font-size_value1/line-height_value1 */
p {font: italic bold 14pt/2 courier;}

/* #T# the font-size property is a string that sets the font size of the text contents of its element */
/* #T#     the predefined values of the font-size property are, by size from small to large: xx-small, x-small, smaller, small, medium, large, larger, x-large, xx-large */
/* #T#     the value of the font-size property can be set using units of measure, see below */
p {font-size: medium;}

/* #T# for the units of measure, there are absolute units of measure, which always have the same size, and there are relative units of measure, which vary in size depending on another value */

/* #T# using num1 as a numeric amount, the absolute units of measure are: */
/* #T#     num1mm, mm stands for millimeters */
/* #T#     num1cm, cm stands for centimeters */
/* #T#     num1in, in stands for inches */
/* #T#     num1px, px stands for pixels, the size of a pixel is determined by a ppi (pixels per inch) setting, commonly 96 ppi, so 1 pixel is 1/96 inches */
/* #T#     num1pt, pt stands for points, there are 72 points per inch, so 1 point is 1/72 inches */
/* #T#     num1pc, pc stands for picas, 1 pica is 12 points, or 12/72 = 1/6 inches */
p {font-size: 2pc;}

/* #T# using num1 as a numeric amount, the relative units of measure are: */
/* #T#     num1em, em is a unit of measure with the same size as the font, so a font of 12pt has 1em of 12pt, for example 2em duplicates the font size */
/* #T#     num1ex, ex is a unit of measure with about half the size of the font, so a font of 12pt has 1ex of 6pt, which comes from the height of the 'x' character, so in some fonts it may not be about half the size of the font */
/* #T#     num1ch, ch is a unit of measure with about half the size of the font, so a font of 12pt has 1ch of 6pt, which comes from the width of the '0' character, so in some fonts it may not be about half the size of the font */
/* #T#     num1rem, rem is a unit of measure like em, but relative to the font size of the parent tag */
/* #T#     num1vw, vw stands for viewport width, it's a unit of measure that is a percent of the size of the viewport width, so 100vw means a font size that covers the whole viewport width */
/* #T#     num1vh, vh stands for viewport height, it's a unit of measure that is a percent of the size of the viewport height, so 100vh means a font size that covers the whole viewport height */
/* #T#     num1vmin, vmin stands for viewport minimum length, the minimum between width and height, so if the viewport width is less than the viewport height, then vmin acts like vw, in the contrary case vmin acts like vh */
/* #T#     num1vmax, vmax stands for viewport maximum length, the maximum between width and height, so if the viewport width is greater than the viewport height, then vmax acts like vw, in the contrary case vmax acts like vh */
/* #T#     num1%, it's a percentage of the parent's font size */
p {font-size: 12pt;}
a {font-size: 1ex;} /* making an <a> tag a child of a <p> tag, text written inside the <a> tag is half the size of the text written inside the <p> tag */

/* #T# the font-family property is a string, or a list of strings separated by comma, that sets the font family of the text contents of its element, a font family is a set of fonts that together cover different styles, such as normal, bold, italic, light, etcetera, each style has a font in the family */

/* the list of strings is called the font stack, the first font family in the font stack is used, unless it's not installed or available, in that case the second font in the font stack is used, and so on */
/* #T#     the predefined values of the font-family property are: serif, sans-serif, monospace, cursive, fantasy */
/* #T#     the value of the font-family property can be set using the names of installed fonts (common values are: Arial, "Courier New", Garamond, Georgia, Helvetica, Tahoma, "Times New Roman", "Trebuchet MS", Verdana), the installed font families can be found, in a Linux system, with the fc-list command, the output of the fc-list command has the format per line '/path/to/font1: font_family_name1: other_info1', the font_family_name1 string is a valid value for the font-family property */
p {font-family: "Courier New", Courier, monospace;} /* #| quotes are required around "Courier New", because the font family name has a space */

/* #T# the font-weight property is a string that sets the font weight of the text contents of its element */
/* #T#     the predefined values of the font-weight property are: normal, bold (absolute value), lighter, bolder (value relative to the parent tag) */
/* #T#     the value of the font-weight property can be set numerically, with a number between 1 and 900 */
p {font-weight: 850;}

/* #T# the line-height property is a string that sets the height of the content of its element */
/* #T#     the predefined value of the line-height property is: normal */
/* #T#     the value of the line-height property can be set using units of measure, the same as in the font-size property */
p {line-height: 5px;}

/* #T# the text-transform property is a string that sets the case of the text contents of its element */
/* #T#     the predefined values of the text-transform property are: capitalize, lowercase, uppercase, none (none doesn't change the text) */
p {text-transform: capitalize;}

/* #T# the letter-spacing property is a string that sets the spacing between consecutive letters of the text contents of its element */
/* #T#     the predefined value of the letter-spacing property is: normal */
/* #T#     the value of the letter-spacing property can be set using units of measure, the same as in the font-size property */
p {letter-spacing: .3cm;}

/* #T# the text-align property is a string that sets the horizontal alignment of the text contents of its element */
/* #T#     the predefined values of the text-align property are: left, center, right, justify (for text justification), start, end (start and end act like left and right with the 'ltr' value of the dir attribute (in a <p> tag, for example), and they act like right and left with the 'rtl' value of the dir attribute (in a <p> tag, for example) */
/* #T#     the text-align property can also be used to set the horizontal alignment of images, inside a figure element */
p {text-align: justify;}
figure {text-align: center;}

/* #T# the font-style property is a string that sets the slant of the text contents of its element */
/* #T#     the predefined values of the font-style property are: normal, italic, oblique */
p {font-style: italic;}

/* #T# the font-variant property is a string that sets whether or not to use small capitalization with the text contents of its element */
/* #T#     the predefined values of the font-variant property are: normal, small-caps */
p {font-variant: small-caps;}

/* #T# the text-decoration property is a set of three strings, one for the text-decoration-line property, one for the text-decoration-color property, and one for the text-decoration-style property, at least the text-decoration-line property is mandatory, see below */
p {text-decoration: underline green wavy;}

/* #T# the text-decoration-line property is a string that sets the placement of a horizontal line in the text contents of its element */
/* #T#     the predefined values of the text-decoration-line property are: none, overline, line-through, underline */
p {text-decoration-line: overline;}

/* #T# the text-decoration-color property is a string that sets the color of the line created by the text-decoration-line property */
/* #T#     the value of the text-decoration-color property can be set the same as in the color property */
p {text-decoration-color: blueviolet;}

/* #T# the text-decoration-style property is a string that sets the style of the line created by the text-decoration-line property */
/* #T#     the predefined values of the text-decoration-style property are: none, solid, double, dashed, dotted, wavy */
p {text-decoration-style: double;}

/* #T# the word-spacing property is a string that sets the spacing between words in the text contents of its element */
/* #T#     the predefined value of the word-spacing property is: normal */
/* #T#     the value of the word-spacing property can be set using units of measure, the same as in the font-size property */
p {word-spacing: 15mm;}

/* #T# the text-indent property is a string that sets the indentation of the first line of the text contents of its element */
/* #T#     the value of the text-indent property can be set using units of measure, the same as in the font-size property */
/* #T#     the value of the text-indent property can be negative, if so, the indentation is made towards the opposite side */
p {text-indent: -0.5in;}
/* # |------------------------------------------------------------- */

/* #C# Box properties */

/* # |------------------------------------------------------------- */
/* #T# each element with content is inside a box, this box has four layers, from outer to inner, these layers are: margin, border, padding, and content */

/* #T# the box-sizing property is a string that sets how to calculate the content box dimensions, from the width and height */
/* #T#     the predefined values of the box-sizing property are, content-box (the content box dimensions are calculated as if the width and height measure the content box itself), border-box (the content box dimensions are calculated as if the width and height measure up to the border box, which includes the content box, the padding box, and the border box itself) */
p
{
    box-sizing: border-box;
    margin: 77px;
    border: solid 20px;
    padding: 30px;
    width: 500px;
} /* #| the content box has a width of 400px, which is 500px from the width, minus 2*(20 + 30) from the two sides of the border and the padding. The margin value is irrelevant to calculate the content box measures */

/* #T# the margin property is a set of up to four strings */

/* #T# if it's one string then the string sets the margins of the four sides */

/* #T# if it's a set of two strings then the first string sets the margin-top and margin-bottom properties, and the second string sets the margin-left and margin-right properties */

/* #T# if it's a set of three strings then the first string sets the margin-top property, the second string sets the margin-left and margin-right properties, and the third string sets the margin-bottom property */

/* #T# and if it's a set of four strings then the first string sets the margin-top property, the second string sets the margin-right property, the third string sets the margin-bottom property, and the fourth string sets the margin-left property, see below */
/* #T#     the value of the margin property can be set using units of measure, the same as in the font-size property */
/* #T#     the value of the margin property means how distant its element must be placed from consecutive elements, it can be negative, if so, it means how close its element must be placed from consecutive elements */
/* #T#     the value of the margin property from two adjacent sides of consecutive elements is merged, this is margin collapsing, two adjacent margins are collapsed into one, the one with the maximum margin when both margins are positive, or the one with the minimum margin when both margins are negative, or the addition of the margins when one is positive and the other negative */
p {margin: 1px 5px -15px;}

/* #T# the margin-top property is a string that sets the top margin of the box of its element */
/* #T#     the value of the margin-top property can be set using units of measure, the same as in the font-size property */
p {margin-top: 3ch}

/* #T# the margin-right property is a string that sets the right margin of the box of its element */
/* #T#     the value of the margin-right property can be set using units of measure, the same as in the font-size property */
p {margin-right: 4vh;}

/* #T# the margin-bottom property is a string that sets the bottom margin of the box of its element */
/* #T#     the value of the margin-bottom property can be set using units of measure, the same as in the font-size property */
p {margin-bottom: 1.4rem;}

/* #T# the margin-left property is a string that sets the left margin of the box of its element */
/* #T#     the value of the margin-left property can be set using units of measure, the same as in the font-size property */
p {margin-left: 10vh;}

/* #T# the border property is a set of three strings, one for the border-style property, one for the border-width property, and one for the border-color property, at least the border-style property is mandatory, see below */
p {border: groove 3px cadetblue;}

/* #T# the border-style property is a string that sets the style of the border of the box of its element */
/* #T#     the predefined values of the border-style property are: none, hidden, solid, double, dashed, dotted, ridge, groove, inset, outset */
p {border-style: solid;}

/* #T# the border-width property is a set of up to four strings that sets the width of the border of the box of its element, the four strings are defined the same as in the margin property (except the border-width property can't have negative values) */
/* #T#     the value of the border-width property can be set using units of measure, the same as in the font-size property */
p {border-width: 3pt 6pt;}

/* #T# the border-color property is a string that sets the color of the border of the box of its element */
/* #T#     the value of the border-color property can be set the same as in the color property */
p {border-color: chartreuse;}

/* #T# the border-top property is a set of three strings, one for the border-top-style property, one for the border-top-width property, and one for the border-top-color property, at least the border-top-style property is mandatory, see below */
p {border-top: ridge .3em navy;}

/* #T# the border-top-style property is a string that sets the style of the top of the border */
/* #T#     the predefined values of the border-top-style property are: none, hidden, solid, double, dashed, dotted, ridge, groove, inset, outset */
p {border-top-style: outset;}

/* #T# the border-top-width property is a string that sets the width of the top of the border */
/* #T#     the value of the border-top-width property can be set using units of measure, the same as in the font-size property */
p {border-top-width: 22px;}

/* #T# the border-top-color property is a string that sets the color of the top of the border */
/* #T#     the value of the border-top-color property can be set the same as in the color property */
p {border-top-color: olivedrab;}

/* #T# the border-right property is a set of three strings, one for the border-right-style property, one for the border-right-width property, and one for the border-right-color property, at least the border-right-style property is mandatory, see below */
p {border-right: ridge .3em navy;}

/* #T# the border-right-style property is a string that sets the style of the right of the border */
/* #T#     the predefined values of the border-right-style property are: none, hidden, solid, double, dashed, dotted, ridge, groove, inset, outset */
p {border-right-style: outset;}

/* #T# the border-right-width property is a string that sets the width of the right of the border */
/* #T#     the value of the border-right-width property can be set using units of measure, the same as in the font-size property */
p {border-right-width: 22px;}

/* #T# the border-right-color property is a string that sets the color of the right of the border */
/* #T#     the value of the border-right-color property can be set the same as in the color property */
p {border-right-color: olivedrab;}

/* #T# the border-bottom property is a set of three strings, one for the border-bottom-style property, one for the border-bottom-width property, and one for the border-bottom-color property, at least the border-bottom-style property is mandatory, see below */
p {border-bottom: ridge .3em navy;}

/* #T# the border-bottom-style property is a string that sets the style of the bottom of the border */
/* #T#     the predefined values of the border-bottom-style property are: none, hidden, solid, double, dashed, dotted, ridge, groove, inset, outset */
p {border-bottom-style: outset;}

/* #T# the border-bottom-width property is a string that sets the width of the bottom of the border */
/* #T#     the value of the border-bottom-width property can be set using units of measure, the same as in the font-size property */
p {border-bottom-width: 22px;}

/* #T# the border-bottom-color property is a string that sets the color of the bottom of the border */
/* #T#     the value of the border-bottom-color property can be set the same as in the color property */
p {border-bottom-color: olivedrab;}

/* #T# the border-left property is a set of three strings, one for the border-left-style property, one for the border-left-width property, and one for the border-left-color property, at least the border-left-style property is mandatory, see below */
p {border-left: ridge .3em navy;}

/* #T# the border-left-style property is a string that sets the style of the left of the border */
/* #T#     the predefined values of the border-left-style property are: none, hidden, solid, double, dashed, dotted, ridge, groove, inset, outset */
p {border-left-style: outset;}

/* #T# the border-left-width property is a string that sets the width of the left of the border */
/* #T#     the value of the border-left-width property can be set using units of measure, the same as in the font-size property */
p {border-left-width: 22px;}

/* #T# the border-left-color property is a string that sets the color of the left of the border */
/* #T#     the value of the border-left-color property can be set the same as in the color property */
p {border-left-color: olivedrab;}

/* #T# the border-radius property is a set of up to two strings separated by a slash, that set a border radius for the box of its element, in num1/num2, num1 sets the horizontal border radius, and num2 sets the vertical border radius */
/* #T#     the value of the border-radius property can be set using units of measure, the same as in the font-size property */
p {border-radius: 100px/20px;}

/* #T# the border-top-right-radius property is a string that sets the radius of the top right corner of the border */
/* #T#     the value of the border-top-right-radius property can be set using units of measure, the same as in the font-size property */
p {border-top-right-radius: 10px;}

/* #T# the border-top-left-radius property is a string that sets the radius of the top left corner of the border */
/* #T#     the value of the border-top-left-radius property can be set using units of measure, the same as in the font-size property */
p {border-top-left-radius: 25px;}

/* #T# the border-bottom-right-radius property is a string that sets the radius of the bottom right corner of the border */
/* #T#     the value of the border-bottom-right-radius property can be set using units of measure, the same as in the font-size property */
p {border-bottom-right-radius: 15px;}

/* #T# the border-bottom-left-radius property is a string that sets the radius of the bottom left corner of the border */
/* #T#     the value of the border-bottom-left-radius property can be set using units of measure, the same as in the font-size property */
p {border-bottom-left-radius: 20px;}

/* #T# the padding property is a set of up to four strings that sets the padding of the box of its element, the four strings are defined the same as in the border-width property */
p {padding: .4cm;}

/* #T# the padding-top property is a string that sets the top padding */
/* #T#     the value of the padding-top property can be set using units of measure, the same as in the font-size property */
p {padding-top: .3in;}

/* #T# the padding-right property is a string that sets the right padding */
/* #T#     the value of the padding-right property can be set using units of measure, the same as in the font-size property */
p {padding-right: .1in;}

/* #T# the padding-bottom property is a string that sets the bottom padding */
/* #T#     the value of the padding-bottom property can be set using units of measure, the same as in the font-size property */
p {padding-bottom: .1in;}

/* #T# the padding-left property is a string that sets the left padding */
/* #T#     the value of the padding-left property can be set using units of measure, the same as in the font-size property */
p {padding-left: .1in;}

/* #T# the height property is a string that sets the height of the content box */
/* #T#     the value of the height property can be set using units of measure, the same as in the font-size property */
p {height: 10cm;}

/* #T# the width property is a string that sets the width of the content box */
/* #T#     the predefined values of the width property are, fit-content (the content box fits its contents, Firefox requires its prefix -moz-fit-content) */
/* #T#     the value of the width property can be set using units of measure, the same as in the font-size property */
p {width: 12cm;}

/* #T# the box-shadow property is a set of three to four strings that set a shadow for the box */
/* #T#     the value of the box-shadow property has the syntax, num1 num2 color1 [inset], where num1 is the horizontal offset of the shadow, num2 is the vertical offset of the shadow, color1 is the color of the shadow */
/* #T#     the values num1 and num2 can be set using units of measure, the same as in the font-size property, and the value color1 can be set the same as in the color property */
p {box-shadow: 100px 10px blue;}

/* #T# the text-shadow property is a set of three strings that set a shadow for the text of its element */
/* #T#     the value of the text-shadow property can be set the same as in the box-shadow property, except that the inset value is not allowed */
p {text-shadow: 3px -3px rgb(10,60,10);}

/* #C# - Positioning properties */

/* # |----- */
/* #T# the display property is a string that sets the display type of its element, elements have a default display type, most commonly block or inline */
/* #T#     the predefined values of the display property are, none (the element is not drawn), block, inline */
p {display: none;}

/* #T# the float property is a string that sets where to float its element with respect to the next element, to float an element means to move it around relative to the next element */
/* #T#     the predefined values of the float property are, none, left, right, inline-start, inline-end (the inline-start and inline-end values, are equivalent to the start and end values of the text-align property */
p {float: inline-end}

/* #T# the clear property is a string that disables the places where the previous element can be floated to, so that the previous element is moved to that place but the element with this property is placed after */
/* #T#     the predefined values of the clear property are, none, left, right, both */
p {clear: both;}

/* #T# the position property is a string that sets the position of its element into the normal flow */
/* #T#     the predefined values of the position property are */
/* #T#         static, the element stays in place, and the top, right, bottom, and left properties are ignored, these are the positioning properties */
/* #T#         relative, the element stays in place but with an offset according to the positioning properties */
/* #T#         absolute, the element is taken out of the normal flow, so it can overlap other elements */
/* #T#         fixed, the element is taken out of the normal flow and fixed in position relative to the viewport */
/* #T#         sticky, the element stays in place but with an offset according to the positioning properties, and when scrolling, the element is fixed in position relative to the viewport */
p {position: static}
/* # |----- */

/* # |------------------------------------------------------------- */

/* #C# Image properties */

/* # |------------------------------------------------------------- */
/* #T# the background property is a shorthand property, that is a set of several strings, one for the background-image property, up to two for the background-position property, one for the background-repeat property */
p {background: url("../path/to/file1.png") bottom right space;}

/* #T# the background-image property is a function that returns an image file, that will be set as the background of the contents of its tag */
/* #T#     the value of the background-image property can be set using the url function, it receives a string with the location of a file, for local files the location is given directly, as url(/path/to/file1) with an absolute path, or url(../../path/to/file1) with a relative path, for files accessed with the HTTP protocol the URL is given, as url(http://url1) */
p {background-image: url(local_image1.png);}

/* #T# the background-size property is a string that sets the size of the background image */
/* #T#     the predefined values of the background-size property are, auto, contain (the whole background image fits), cover (the height or the width of the background image fits) */
/* #T#     the value of the background-size property can be set using units of measure, the same as in the font-size property */
p {background-size: 70px;}
p {background-size: 100% 100%;} /* #| this stretches the background image to cover the element, without preserving the aspect ratio of the original background image */

/* #T# the background-repeat property is a set of up to two strings, the first to set the horizontal repeating pattern, and the second to set the vertical repeating pattern, if given only one string then it applies to both dimensions */
/* #T#     the predefined values of the background-repeat property are: no-repeat, repeat, repeat-x, repeat-y, round (repeats without cropping the image, by changing the aspect ratio), space (repeats without cropping the image, by spacing the repeated images) */
p {background-repeat: repeat no-repeat;} /* #| equivalent to only having repeat-x */

/* #T# the background-position property is a set of up to two strings, one to set the horizontal position of the image before repeating it, and one to set to vertical position of the image before repeating it, if given only one string, the other is assumed to be 'center' */
/* #T#     the predefined values of the background-position property are, for the horizontal position, left, center, right, and for the vertical position, top, center, bottom */
p {background-position: bottom right;}

/* #T# gradients can be used as images, for example in the background-image property */
/* #T#     the linear-gradient function creates a linear gradient, it has the signature linear-gradient(angle1, color1 percent1, color2 percent2, colorN percentN), where angle1 is the angle of the gradient, measured clockwise with zero being north or up, it can be set the same as in the rotate function, color1 up to colorN are colors that can be set the same as in the color property, the percentages set the location of each color inside the gradient as a percent (they are optional, if omitted, then the colors are distributed uniformly) */
/* #T#     the repeating-linear-gradient function works the same as the linear-gradient function, but repeating the gradient, to see the repetitions, percentN must be less that 100% */
/* #T#     the radial-gradient function creates a radial gradient, it has the signature radial-gradient(color1 percent1, color2 percent2, colorN percentN), the pairs colorN percentN can be set the same as in the linear-gradient function */
/* #T#     the repeating-radial-gradient function works the same as the radial-gradient function, but repeating the pattern, to see the repetitions, percentN must be less than 100% */
p {background-image: linear-gradient(115deg, green, red 24%, blue);}
p {background-image: repeating-linear-gradient(115deg, green, red 24%, blue 32%);}
p {background-image: radial-gradient(green, red 24%, blue 52%);}
p {background-image: repeating-radial-gradient(green, red 24%, blue 52%);}

/* #T# the background-clip property is a string that sets the area that contains the background. The background is clipped after this area */
/* #T#     the predefined values of the background-clip property are: content-box (the background extends to the edges of the content box), padding-box (the background extends to the edges of the padding box), border-box (the background extends to the edges of the border box) */
p {background-clip: content-box;}

/* #T# the border-image property is a shorthand property for five properties, the border-image-outset property, the border-image-repeat property, the border-image-slice property, the border-image-source property, and the border-image-width property */
p
{
    border: solid;
    border-image: url(dir1/image1.png) 400 fill stretch;
}

/* #T# the border-image-slice property determines how to slice the image being used as border */
/* #T# the value of the border-image-slice property is made with up to four numbers (in pixels for raster images, in coordinates for vector images) or percentages */
p {border-image-slice: 400 300 200 100;}
/* #T# if the numbers used measure more than half the size of the image, then the border will only be drawn in the corners */
/* # |------------------------------------------------------------- */

/* #C# Text properties */

/* # |------------------------------------------------------------- */
/* #T# the content property is a string that is used along the before and after pseudo-elements */
/* #T#     the value of the content property is any arbitrary string */
p {content: "string1"}

/* #T# the white-space property is a string that sets how to treat the white space from the strings of the element */
/* #T#     the predefined values of the white-space property are: normal (white space is collapsed in the HTML output), nowrap (white space is collapsed, but text is not wrapped at the end of the screen), pre (white space is preserved, but the text is not wrapped), pre-wrap (white space is preserved and the text is wrapped) */
p {white-space: pre-wrap;}
/* # |------------------------------------------------------------- */

/* #C# Link pseudo-classes */

/* # |------------------------------------------------------------- */
/* #T# tags that work as links, like the <a> tag and the <button> tag, have a particular set of pseudo-classes, that serve to apply style to the elements of those tags when receiving events, such as the mouse hovering over the elements of those tags, or being clicked on */

/* #T# the main pseudo-classes of links are, link, visited, hover, and active, it's recommended to apply style in that order, for example the link pseudo-class and the visited pseudo-class may override some of the other pseudo-classes, and so they must be placed first */
/* #T#     the link pseudo-class selects links that have not been visited */
/* #T#     the visited pseudo-class selects links that have already been visited in the browser history */
/* #T#     the hover pseudo-class selects links that have the mouse hovering over */
/* #T#     the active pseudo-class selects links that are being clicked on */

a:link
{
    color:crimson;
}
a:visited
{
    color: steelblue;
}
a:hover
{
    color:chartreuse;
}
a:active
{
    color: blueviolet;
}
/* # |------------------------------------------------------------- */

/* #C# Transformation properties */

/* # |------------------------------------------------------------- */
/* #T# when an element receives an event, such as the mouse hovering over it, or it being clicked on, it's possible to animate the change in the properties that change as a response to the received event, so that the change is not instantaneous */

/* #T# this is mostly used with tags that work as links, but any tag that can receive events can have its changing properties animated */

/* #T# the transition property is a shorthand property, that is a set of up to four strings, one for the transition-property property, one for the transition-duration property, one for the transition-timing-function property, and one for the transition-delay property */
p {transition: all 3s;}
p:hover {color: darkolivegreen;} /* #| the color from a <p> element will be animated to change from black to darkolivegreen, in 3 seconds since the moment the mouse hovers and stays over the <p> element */

/* #T# the transition-property property is a string that sets the property, or properties separated by comma, that will be animated */
p {transition-property: color, font-size}

/* #T# the transition-duration property is a string that sets the time duration of the animation, in seconds (suffix 's') or milliseconds (suffix 'ms') */
p {transition-duration: 5s;}

/* #T# the transition-timing-function property is a string that sets the interpolation curve for the animation */
/* #T#     the predefined values of the transition-timing-function property are, ease, ease-in, ease-in-out, ease-out, linear, step-start, step-end */
/* #T#     the value of the transition-timing-function property can be set using the cubic-bezier function, it's signature is cubic-bezier(x1, y1, x2, y2), it creates a bezier curve with four points, the first point is at (0, 0) and it represents the starting value of the property being animated, the last point is at (1, 1) and it represents the ending value of the property being animated, (x1, y1) and (x2, y2) are middle points in the bezier curve */
p {transition-timing-function: cubic-bezier(.2, .9, .8, -.9)} /* #| this creates an interpolation curve that looks like a sinusoidal curve */

/* #T# the transition-delay property is a string that sets a time delay before the animation can start, it's value can be set the same as in the transition-duration property */
p {transition-delay: 1s;}

/* #T# the transform property is a set of strings that make a geometric transformation of its element */
/* #T#     the values of the transform property must be separated by space, each value can be set with the translate, translate3d, rotate, rotate3d, scale, scale3d, skew, and perspective functions */
/* #T#       the translate function has the signature translate(num1, num2), where num1 is the horizontal translation rightwards, num2 is the vertical translation downwards, the arguments use units of measure, the same as in the font-size property */
/* #T#       the translate3d function has the signature translate3d(num1, num2, num3), where num1 and num2 are the same as in the translate function, and num3 is the depth translation inwards (towards the user), the arguments use units of measure, the same as in the font-size property */
/* #T#       the rotate function has the signature rotate(num1suffix1), where num1 is the clockwise rotation, suffix1 indicates the units of measure, 'deg' for degrees, 'rad' for radians, 'turn' for turns) */
/* #T#       the rotate3d function has the signature rotate3d(num1, num2, num3, num4suffix4), where the triple (num1, num2, num3) represents a vector that is the axis of rotation, num1 points to the right, num2 points down, num3 points towards the user, num4suffix4 is an amount of rotation that can be set the same as in the rotate function */
/* #T#       the scale function has the signature scale(num1, num2), where num1 is the horizontal scale, num2 is the vertical scale */
/* #T#       the scale3d function has the signature scale3d(num1, num2, num3), where num1 and num2 are the same as in the scale function, num3 is the depth scale */
/* #T#       the skew function has the signature skew(num1suffix1, num2suffix2), where num1suffix1 is the amount of horizontal skew, num2suffix2 is the amount of vertical skew, both can be set the same as in the rotate function */
p {transform: translate(3cm, 2cm);}
p {transform: perspective(10cm) translate3d(2cm, 1cm, 8cm);}
p {transform: rotate(40deg);}
p {transform: perspective(10cm) rotate3d(0, 1, 0, .4turn);}
p {transform: scale(2, 1.4);}
p {transform: perspective(10cm) rotate3d(0, 1, 0, 30deg) scale3d(2, 1.4, 5);}
p {transform: skew(20deg, 10deg);}

/* #T# the transform-origin property is a set of up to two strings that sets the origin for a geometric transformation */
/* #T#     the predefined values of the transform-origin property are */
/* #T#       for the horizontal location of the origin, left, center, right */
/* #T#       for the vertical location of the origin, top, center, bottom */
/* #T#     the value of the transform-origin property can be set using units of measure, the same as in the font-size property, and two values can be used, the first for the horizontal location of the origin, and the second for the vertical location of the origin */
p {transform-origin: left top;}
/* # |------------------------------------------------------------- */

/* #C# At rules */

/* # |------------------------------------------------------------- */
/* #T# at rules are directives that change the interpretation of this CSS file */

/* #T# the @charset rule sets the character encoding of this file */
/* @charset "UTF-8"; */

/* #T# the @import rule imports an external CSS file, it puts the contents of the external file into this file, this rule must be placed at the start of the file, but after the @charset rule */
@import url("../path/to/file1.css");

/* #T# the @font-face rule is used to create a customized font family */

/* # SYNTAX creating and applying a font family with the @font-face rule    */
/* # @font-face                                                             */
/* # {                                                                      */
/* #     font-family: "new_font_family1";                                   */
/* #     src: local(font1), url("../path/to/font_file1") format("format1"); */
/* #     font_properties1;                                                  */
/* # }                                                                      */
/* #                                                                        */
/* # tag1                                                                   */
/* # {                                                                      */
/* #     font-family: "new_font_family1";                                   */
/* #     font_properties1;                                                  */
/* # }                                                                      */
/* #T# the font-family property inside the @font-face rule, determines the name of the created font family, "new_font_family1", which can be used as value for the font-family property inside tag1 */

/* #T# the local function does not take a local path as argument, but the name font1 of a given font that may be installed locally */

/* #T# the format function sets the format of the font file "../path/to/font_file1", the values of "format1" are, "opentype", "truetype", "woff", "woff2", "svg" */

/* #T# font_properties1 is the set of font properties (such as font-style, font-weight, etcetera) that causes the "new_font_family1" to be applied to tag1, so if font_properties1 are not set inside tag1, then "new_font_family1" is applied but with possibly different properties, for example a bold font could be applied to non bold text */

@font-face
{
    font-family: "font_family1";
    src: local(Arial), url("../path/to/file1.otf");
    font-weight: normal;
}
p
{
    font-family: "font_family1";
    font-weight: normal;
}
/* # |------------------------------------------------------------- */